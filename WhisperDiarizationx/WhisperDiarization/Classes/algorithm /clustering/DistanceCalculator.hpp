//
//  DistanceCalculator.h
//  WhisperDiarization
//
//  Created by fuhao on 2023/5/6.
//

#ifndef DistanceCalculator_h
#define DistanceCalculator_h

namespace CSAlgorithm  {

class DistanceCalculatorType{
public:
    enum Type {
        SINGLE_LINK = 0,
        COMPLETE_LINK,
        CENTROID,
        AVERAGE,
        WARD
    };
};

// Calculate the distance between an exist node and a new node which
// is generated by merging the nodes so called left and right
class DistanceCalculator {
protected:
    DistanceCalculator() {};
public:
    virtual float operator() (int m_left, // num of basic nodes included in left
            int m_right,  // num of basic nodes included in right
            int m_cur,  // num of basic nodes included in the current node
            float dis_left,  // distance between left and current node
            float dis_right, // distance between right and current node
            float dis_left_right  // distance between left and right
    ) const = 0;

    virtual ~DistanceCalculator() {}

    friend class DistanceCalculatorFactory;
};

class SingleLinkDistanceCalculator : public DistanceCalculator {
public:
    virtual float operator() (int m_left,
            int m_right,
            int m_cur,
            float dis_left,
            float dis_right,
            float dis_left_right) const {
        return dis_left > dis_right ? dis_right : dis_left;
    }

    virtual  ~SingleLinkDistanceCalculator() {}
};

class CompleteLinkDistanceCalculator : public DistanceCalculator {
public:
    virtual float operator() (int m_left,
            int m_right,
            int m_cur,
            float dis_left,
            float dis_right,
            float dis_left_right
    ) const {
        return dis_left > dis_right ? dis_left : dis_right;
    }

    virtual ~CompleteLinkDistanceCalculator() {}
};

class CentroidDistanceCalculator : public DistanceCalculator {
public:
    virtual float operator()(int m_left,
            int m_right,
            int m_cur,
            float dis_left,
            float dis_right,
            float dis_left_right) const {
        float ret = ((float) m_left * dis_left + (float) m_right * dis_right)
                / (m_left + m_right);
        ret = ret - ((float) m_left / (float) (m_left + m_right))
                * ((float) m_right / (float) (m_left + m_right))
                * dis_left_right;
        return ret;
    }

    virtual ~CentroidDistanceCalculator() {}
};

class AverageDistanceCalculator : public  DistanceCalculator {
public:
    virtual float operator() (int m_left,
            int m_right,
            int m_cur,
            float dis_left,
            float dis_right,
            float dis_left_right
    ) const {
        return (float)m_left * dis_left / (m_left + m_right)
                + (float)m_right * dis_right / (m_left + m_right);
    }

    virtual ~AverageDistanceCalculator() {}
};

class WardDistanceCalculator : public DistanceCalculator {
public:
    virtual float operator()(int m_left,
            int m_right,
            int m_cur,
            float dis_left,
            float dis_right,
            float dis_left_right) const {
        return (float)(m_left + m_cur) * dis_left / (m_left + m_right + m_cur)
                + (float)(m_right + m_cur) * dis_right / (m_left + m_right + m_cur)  // NOLINT
                - (float)m_cur * dis_left_right / (m_left + m_right + m_cur);
    }

    virtual ~WardDistanceCalculator() {}
};

class DistanceCalculatorFactory {
public:
    static const DistanceCalculator* createCalculator(
            DistanceCalculatorType::Type type) {
        switch (type) {
            case DistanceCalculatorType::SINGLE_LINK:
                return new SingleLinkDistanceCalculator();
            case DistanceCalculatorType::COMPLETE_LINK:
                return new CompleteLinkDistanceCalculator();
            case DistanceCalculatorType::CENTROID:
                return new CentroidDistanceCalculator();
            case DistanceCalculatorType::AVERAGE:
                return new AverageDistanceCalculator();
            case DistanceCalculatorType::WARD:
                return new WardDistanceCalculator();
            default:
                return NULL;
        }
    }
};

}  // namespace CSAlgorithm 

#endif /* DistanceCalculator_h */
